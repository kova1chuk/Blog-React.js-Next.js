{"version":3,"file":"static/development/pages/posts/[postId].js","sources":["webpack:///webpack/bootstrap","webpack:///./components/UpdatePost.tsx","webpack:///./core/axios.ts","webpack:///./core/index.ts","webpack:///./pages/posts/[postId].tsx","webpack:///./store/posts/actions.ts","webpack:///./store/posts/types.ts","webpack:///./store/retrievePost/actions.ts","webpack:///./store/retrievePost/types.ts","webpack:///./utils/api/comment.ts","webpack:///./utils/api/index.ts","webpack:///./utils/api/post.ts","webpack:///external \"axios\"","webpack:///external \"lodash/values\"","webpack:///external \"next/router\"","webpack:///external \"react\"","webpack:///external \"react-redux\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","import React, { useState } from \"react\";\n\nimport { IPost } from \"interfaces\";\n\nconst UpdatePost: React.FC<{\n  post: IPost;\n  sendUpdate: Function;\n  sendDelete: Function;\n}> = ({ post, sendUpdate, sendDelete }) => {\n  const [update, setUpdate] = useState(false);\n  const [updateTitle, setUpdateTitle] = useState(post ? post.title : \"\");\n  const [updateBody, setUpdateBody] = useState(post ? post.body : \"\");\n\n  const changeTitle = (event) => {\n    setUpdateTitle(event.target.value);\n  };\n\n  const changeBody = (event) => {\n    setUpdateBody(event.target.value);\n  };\n\n  return (\n    <div className=\"post__edit\">\n      {!update ? (\n        <>\n          <button onClick={() => setUpdate(true)}>Update</button>\n          <button onClick={() => sendDelete(post.id)}>Delete</button>\n        </>\n      ) : (\n        <>\n          <input type=\"text\" value={updateTitle} onChange={changeTitle} />\n          <input type=\"text\" value={updateBody} onChange={changeBody} />\n          <button onClick={() => sendUpdate(post.id, updateTitle, updateBody)}>\n            Confirm\n          </button>\n          <button onClick={() => setUpdate(false)}>Cancel</button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default UpdatePost;\n","import axios from \"axios\";\n\naxios.defaults.headers.common[\"Content-Type\"] = \"application/json\";\naxios.defaults.baseURL = \"https://simple-blog-api.crew.red\";\n\nexport default axios;\n","export { default as axios } from \"./axios\";\n","import React, { useState } from \"react\";\n\nimport { useRouter } from \"next/router\";\nimport { connect } from \"react-redux\";\nimport values from \"lodash/values\";\n\nimport retrievePostActions from \"store/retrievePost/actions\";\nimport postActions from \"store/posts/actions\";\nimport { IRetrievePost } from \"interfaces\";\nimport UpdatePost from \"components/UpdatePost\";\n\ninterface IProps {\n  post: IRetrievePost;\n  fetchRetrievePosts: any;\n  fetchUpdatePost: any;\n  fetchDeletePost: any;\n  fetchCreateComment: any;\n}\n\nconst Posts: React.FC<IProps> = ({\n  post,\n  fetchRetrievePosts,\n  fetchUpdatePost,\n  fetchDeletePost,\n  fetchCreateComment,\n}) => {\n  const router = useRouter();\n\n  const [newComment, setNewComment] = useState<string>(\"\");\n\n  const postId: string | string[] = router.query.postId;\n\n  if (!post || post.id !== Number(postId)) {\n    fetchRetrievePosts(router.query.postId).then(() => {});\n  }\n\n  const updatePost = (postId, updateTitle, updateBody) => {\n    fetchUpdatePost(postId, updateTitle, updateBody).then(() => {\n      fetchRetrievePosts(router.query.postId);\n    });\n  };\n\n  const deletePost = () => {\n    fetchDeletePost(postId).then(() => {\n      alert(\"Post deleted!\");\n      router.push(\"/\");\n    });\n  };\n\n  const changeComment = (event) => {\n    setNewComment(event.target.value);\n  };\n\n  const addComment = () => {\n    fetchCreateComment(postId, newComment);\n  };\n\n  return (\n    post && (\n      <div className=\"post\">\n        <div className=\"post__title\">{post.title}</div>\n        <div className=\"post__body\">{post.body}</div>\n        <UpdatePost\n          post={post}\n          sendUpdate={updatePost}\n          sendDelete={deletePost}\n        />\n        <div className=\"post__add-comment\">\n          <input type=\"text\" value={newComment} onChange={changeComment} />\n          <button onClick={addComment}>Add comment</button>\n        </div>\n        <div className=\"post__comments\">\n          {values(post.comments).map((comment) => (\n            <p>{comment.body}</p>\n          ))}\n        </div>\n      </div>\n    )\n  );\n};\n\nconst mapStateToProps = ({ retrievePostReducer }) => ({\n  post: retrievePostReducer.post,\n});\nconst mapDispatchToProps = {\n  fetchRetrievePosts: retrievePostActions.fetchRetrievePosts,\n  fetchUpdatePost: postActions.fetchUpdatePost,\n  fetchDeletePost: postActions.fetchDeletePost,\n  fetchCreateComment: retrievePostActions.fetchCreateComment,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);\n","import { postApi } from \"utils/api\";\n\nimport { IPosts, IPost } from \"interfaces\";\nimport {\n  CREATE_POST,\n  UPDATE_POST,\n  DELETE_POST,\n  SET_POSTS,\n  IPostActionTypes,\n} from \"./types\";\n\nconst Actions = {\n  createPost: (newPost: IPost): IPostActionTypes => {\n    return {\n      type: CREATE_POST,\n      payload: newPost,\n    };\n  },\n\n  updatePost: (newPost: IPost): IPostActionTypes => {\n    return {\n      type: UPDATE_POST,\n      payload: newPost,\n    };\n  },\n\n  deletePost: (postId: number): IPostActionTypes => {\n    return {\n      type: DELETE_POST,\n      payload: { id: postId },\n    };\n  },\n\n  setPosts: (posts: IPosts): IPostActionTypes => {\n    return {\n      type: SET_POSTS,\n      payload: posts,\n    };\n  },\n\n  //   fetchCreatePost: (title, body) => (dispatch) :void => {\n  // postApi.createPost(title, body)\n  //   }\n\n  fetchPosts: () => (dispatch): Promise<void> => {\n    return postApi\n      .getListAllPost()\n      .then(({ data }) => {\n        dispatch(Actions.setPosts(<IPosts>data));\n        return Promise.resolve();\n      })\n      .catch((err) => console.log(err));\n  },\n  fetchDeletePost: (postId) => (dispatch): Promise<void> => {\n    return postApi.deletePost(postId).then((data) => {\n      console.log(\"data\", data);\n      dispatch(Actions.deletePost(postId));\n      return Promise.resolve();\n    });\n  },\n  fetchUpdatePost: (postId, title, body) => (dispatch): Promise<void> => {\n    return postApi.updatePost(postId, title, body).then(({ data }) => {\n      console.log(\"data\", data);\n      dispatch(\n        Actions.updatePost({\n          id: data.id,\n          title: data.title,\n          body: data.body,\n        })\n      );\n      return Promise.resolve();\n    });\n  },\n};\n\nexport default Actions;\n","import { IPosts, IPost } from \"interfaces\";\n\nexport interface IPostsState {\n  posts: IPosts;\n}\n\nexport const CREATE_POST = \"CREATE_POST\";\nexport const UPDATE_POST = \"UPDATE_POST\";\nexport const DELETE_POST = \"DELETE_POST\";\nexport const SET_POSTS = \"SET_POSTS\";\n\ninterface ICreatePostAction {\n  type: typeof CREATE_POST;\n  payload: IPost;\n}\n\ninterface IUpdatePostAction {\n  type: typeof UPDATE_POST;\n  payload: IPost;\n}\n\ninterface IDeletePostAction {\n  type: typeof DELETE_POST;\n  payload: { id: number };\n}\n\ninterface ISetPostsAction {\n  type: typeof SET_POSTS;\n  payload: IPosts;\n}\n\nexport type IPostActionTypes =\n  | ICreatePostAction\n  | IUpdatePostAction\n  | IDeletePostAction\n  | ISetPostsAction;\n","import { postApi, commentApi } from \"utils/api\";\n\nimport { IRetrievePost, IComment } from \"interfaces\";\nimport {\n  SET_RETRIEVE_POST,\n  IRetrievePostActionTypes,\n  ADD_COMMENT,\n} from \"./types\";\n\nconst Actions = {\n  setRetrievePost: (retrievePost: IRetrievePost): IRetrievePostActionTypes => {\n    return {\n      type: SET_RETRIEVE_POST,\n      payload: retrievePost,\n    };\n  },\n  addComment: (comment: IComment): IRetrievePostActionTypes => {\n    return {\n      type: ADD_COMMENT,\n      payload: comment,\n    };\n  },\n  fetchRetrievePosts: (postId) => (dispatch): Promise<void> => {\n    return postApi\n      .getRetrievePost(postId)\n      .then(({ data }) => {\n        dispatch(Actions.setRetrievePost(<IRetrievePost>data));\n        return Promise.resolve();\n      })\n      .catch((err) => console.log(err));\n  },\n  fetchCreateComment: (postId, body) => (dispatch): void => {\n    commentApi.createComment(postId, body).then((response) => {\n      const { data } = response;\n      dispatch(Actions.addComment(<IComment>data));\n    });\n  },\n};\n\nexport default Actions;\n","import { IRetrievePost, IComment } from \"interfaces\";\n\nexport interface IRetrievePostState {\n  post: IRetrievePost;\n}\nexport const SET_RETRIEVE_POST = \"SET_RETRIEVE_POST\";\nexport const ADD_COMMENT = \"ADD_COMMENT\";\n\ninterface ISetRetrievePostAction {\n  type: typeof SET_RETRIEVE_POST;\n  payload: IRetrievePost;\n}\n\ninterface IAddCommentAction {\n  type: typeof ADD_COMMENT;\n  payload: IComment;\n}\n\nexport type IRetrievePostActionTypes =\n  | ISetRetrievePostAction\n  | IAddCommentAction;\n","import { axios } from \"core\";\n\nexport default {\n  createComment: (post_id, body) =>\n    axios.post(\"/comments\", { postId: post_id, body: body }),\n};\n","export { default as postApi } from \"./post\";\nexport { default as commentApi } from \"./comment\";\n","import { axios } from \"core\";\n\nexport default {\n  getListAllPost: () => axios.get(\"/posts\"),\n  getRetrievePost: (post_id) => axios.get(`/posts/${post_id}?_embed=comments`),\n  createPost: (title, body) =>\n    axios.post(\"/posts\", {\n      title: title,\n      body: body,\n    }),\n  updatePost: (post_id, title, body) =>\n    axios.put(`/posts/${post_id}`, {\n      title: title,\n      body: body,\n    }),\n  deletePost: (post_id) => axios.delete(`/posts/${post_id}`),\n};\n","module.exports = require(\"axios\");","module.exports = require(\"lodash/values\");","module.exports = require(\"next/router\");","module.exports = require(\"react\");","module.exports = require(\"react-redux\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACxFA;AACA;AAGA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;;;;;;;;;;;;AC3FA;AAAA;AAAA;AAAA;AAGA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AA7DA;AAgEA;;;;;;;;;;;;ACrEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAGA;AAMA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA3BA;AA8BA;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;ACNA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAFA;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AAEA;AACA;AAFA;AAIA;AAbA;;;;;;;;;;;;;;;;;;;;;;;ACFA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}