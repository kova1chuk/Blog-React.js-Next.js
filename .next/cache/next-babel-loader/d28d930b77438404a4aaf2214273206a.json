{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport values from \"lodash/values\";\nimport { SET_RETRIEVE_POST, ADD_COMMENT } from \"./types\";\nconst initialState = {\n  post: null\n};\nexport const retrievePostReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_RETRIEVE_POST:\n      return {\n        post: action.payload\n      };\n\n    case ADD_COMMENT:\n      const comments = [...values(state.post.comments), action.payload];\n      return {\n        post: _objectSpread({}, state.post, {\n          comments: comments\n        })\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/develops-today-test-task1/store/retrievePost/reducer.ts"],"names":["values","SET_RETRIEVE_POST","ADD_COMMENT","initialState","post","retrievePostReducer","state","action","type","payload","comments"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,eAAnB;AACA,SAEEC,iBAFF,EAGEC,WAHF,QAKO,SALP;AAQA,MAAMC,YAAgC,GAAG;AACvCC,EAAAA,IAAI,EAAE;AADiC,CAAzC;AAIA,OAAO,MAAMC,mBAAmB,GAAG,CACjCC,KAAK,GAAGH,YADyB,EAEjCI,MAFiC,KAGV;AACvB,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,iBAAL;AACE,aAAO;AACLG,QAAAA,IAAI,EAAEG,MAAM,CAACE;AADR,OAAP;;AAGF,SAAKP,WAAL;AACE,YAAMQ,QAAoB,GAAG,CAC3B,GAAGV,MAAM,CAACM,KAAK,CAACF,IAAN,CAAWM,QAAZ,CADkB,EAE3BH,MAAM,CAACE,OAFoB,CAA7B;AAKA,aAAO;AACLL,QAAAA,IAAI,oBACCE,KAAK,CAACF,IADP;AAEFM,UAAAA,QAAQ,EAAEA;AAFR;AADC,OAAP;;AAMF;AACE,aAAOJ,KAAP;AAlBJ;AAoBD,CAxBM","sourcesContent":["import values from \"lodash/values\";\nimport {\n  IRetrievePostState,\n  SET_RETRIEVE_POST,\n  ADD_COMMENT,\n  IRetrievePostActionTypes,\n} from \"./types\";\nimport { IComment } from \"interfaces\";\n\nconst initialState: IRetrievePostState = {\n  post: null,\n};\n\nexport const retrievePostReducer = (\n  state = initialState,\n  action: IRetrievePostActionTypes\n): IRetrievePostState => {\n  switch (action.type) {\n    case SET_RETRIEVE_POST:\n      return {\n        post: action.payload,\n      };\n    case ADD_COMMENT:\n      const comments: IComment[] = [\n        ...values(state.post.comments),\n        action.payload,\n      ];\n\n      return {\n        post: {\n          ...state.post,\n          comments: comments,\n        },\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}