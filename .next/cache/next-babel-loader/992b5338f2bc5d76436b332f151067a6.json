{"ast":null,"code":"import { postApi } from \"utils/api\";\nimport { CREATE_POST, UPDATE_POST, DELETE_POST, SET_POSTS } from \"./types\";\nvar Actions = {\n  createPost: function createPost(newPost) {\n    return {\n      type: CREATE_POST,\n      payload: newPost\n    };\n  },\n  updatePost: function updatePost(newPost) {\n    return {\n      type: UPDATE_POST,\n      payload: newPost\n    };\n  },\n  deletePost: function deletePost(postId) {\n    return {\n      type: DELETE_POST,\n      payload: {\n        id: postId\n      }\n    };\n  },\n  setPosts: function setPosts(posts) {\n    return {\n      type: SET_POSTS,\n      payload: posts\n    };\n  },\n  // fetchCreatePost: () => (dispatch) :void => {\n  // }\n  fetchPosts: function fetchPosts() {\n    return function (dispatch) {\n      return postApi.getListAllPost().then(function (_ref) {\n        var data = _ref.data;\n        dispatch(Actions.setPosts(data));\n        return Promise.resolve();\n      })[\"catch\"](function (err) {\n        return console.log(err);\n      });\n    };\n  },\n  fetchDeletePost: function fetchDeletePost(postId) {\n    return function (dispatch) {\n      return postApi.deletePost(postId).then(function (data) {\n        console.log(\"data\", data);\n        dispatch(Actions.deletePost(postId));\n        return Promise.resolve();\n      });\n    };\n  },\n  fetchUpdatePost: function fetchUpdatePost(postId, title, body) {\n    return function (dispatch) {\n      postApi.updatePost(postId, title, body).then(function (_ref2) {\n        var data = _ref2.data;\n        console.log(\"data\", data);\n        dispatch(Actions.updatePost(data.id, data.title, data.body));\n      });\n    };\n  }\n};\nexport default Actions;","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/DevelopsTodayTestTask/store/posts/actions.ts"],"names":["Actions","createPost","type","payload","newPost","updatePost","deletePost","id","postId","setPosts","posts","fetchPosts","data","dispatch","Promise","console","fetchDeletePost","fetchUpdatePost","postApi"],"mappings":"AAAA,SAAA,OAAA,QAAA,WAAA;AAGA,SAAA,WAAA,EAAA,WAAA,EAAA,WAAA,EAAA,SAAA,QAAA,SAAA;AAQA,IAAMA,OAAO,GAAG;AACdC,EAAAA,UAAU,EAAE,SAAA,UAAA,CAAA,OAAA,EAAsC;AAChD,WAAO;AACLC,MAAAA,IAAI,EADC,WAAA;AAELC,MAAAA,OAAO,EAAEC;AAFJ,KAAP;AAFY,GAAA;AAQdC,EAAAA,UAAU,EAAE,SAAA,UAAA,CAAA,OAAA,EAAsC;AAChD,WAAO;AACLH,MAAAA,IAAI,EADC,WAAA;AAELC,MAAAA,OAAO,EAAEC;AAFJ,KAAP;AATY,GAAA;AAedE,EAAAA,UAAU,EAAE,SAAA,UAAA,CAAA,MAAA,EAAsC;AAChD,WAAO;AACLJ,MAAAA,IAAI,EADC,WAAA;AAELC,MAAAA,OAAO,EAAE;AAAEI,QAAAA,EAAE,EAAEC;AAAN;AAFJ,KAAP;AAhBY,GAAA;AAsBdC,EAAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,KAAA,EAAqC;AAC7C,WAAO;AACLP,MAAAA,IAAI,EADC,SAAA;AAELC,MAAAA,OAAO,EAAEO;AAFJ,KAAP;AAvBY,GAAA;AA6Bd;AAEA;AAEAC,EAAAA,UAAU,EAAE,SAAA,UAAA,GAAA;AAAA,WAAM,UAAA,QAAA,EAA6B;AAC7C,aAAO,OAAO,CAAP,cAAA,GAAA,IAAA,CAEC,UAAA,IAAA,EAAc;AAAA,YAAXC,IAAW,GAAA,IAAA,CAAXA,IAAW;AAClBC,QAAAA,QAAQ,CAACb,OAAO,CAAPA,QAAAA,CAATa,IAASb,CAAD,CAARa;AACA,eAAOC,OAAO,CAAd,OAAOA,EAAP;AAJG,OAAA,EAAA,OAAA,EAME,UAAA,GAAA,EAAA;AAAA,eAASC,OAAO,CAAPA,GAAAA,CAAT,GAASA,CAAT;AANT,OAAO,CAAP;AADU,KAAA;AAjCE,GAAA;AA0CdC,EAAAA,eAAe,EAAE,SAAA,eAAA,CAAA,MAAA,EAAA;AAAA,WAAY,UAAA,QAAA,EAA6B;AACxD,aAAO,OAAO,CAAP,UAAA,CAAA,MAAA,EAAA,IAAA,CAAgC,UAAA,IAAA,EAAU;AAC/CD,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,MAAAA,EAAAA,IAAAA;AACAF,QAAAA,QAAQ,CAACb,OAAO,CAAPA,UAAAA,CAATa,MAASb,CAAD,CAARa;AACA,eAAOC,OAAO,CAAd,OAAOA,EAAP;AAHF,OAAO,CAAP;AADe,KAAA;AA1CH,GAAA;AAiDdG,EAAAA,eAAe,EAAE,SAAA,eAAA,CAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA;AAAA,WAAyB,UAAA,QAAA,EAAoB;AAC5DC,MAAAA,OAAO,CAAPA,UAAAA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,IAAAA,EAAAA,IAAAA,CAA6C,UAAA,KAAA,EAAc;AAAA,YAAXN,IAAW,GAAA,KAAA,CAAXA,IAAW;AACzDG,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,MAAAA,EAAAA,IAAAA;AACAF,QAAAA,QAAQ,CAACb,OAAO,CAAPA,UAAAA,CAAmBY,IAAI,CAAvBZ,EAAAA,EAA4BY,IAAI,CAAhCZ,KAAAA,EAAwCY,IAAI,CAArDC,IAASb,CAAD,CAARa;AAFFK,OAAAA;AADe,KAAA;AAAA;AAjDH,CAAhB;AAyDA,eAAA,OAAA","sourcesContent":["import { postApi } from \"utils/api\";\n\nimport { IPosts, IPost } from \"interfaces\";\nimport {\n  CREATE_POST,\n  UPDATE_POST,\n  DELETE_POST,\n  SET_POSTS,\n  IPostActionTypes,\n} from \"./types\";\n\nconst Actions = {\n  createPost: (newPost: IPost): IPostActionTypes => {\n    return {\n      type: CREATE_POST,\n      payload: newPost,\n    };\n  },\n\n  updatePost: (newPost: IPost): IPostActionTypes => {\n    return {\n      type: UPDATE_POST,\n      payload: newPost,\n    };\n  },\n\n  deletePost: (postId: number): IPostActionTypes => {\n    return {\n      type: DELETE_POST,\n      payload: { id: postId },\n    };\n  },\n\n  setPosts: (posts: IPosts): IPostActionTypes => {\n    return {\n      type: SET_POSTS,\n      payload: posts,\n    };\n  },\n\n  // fetchCreatePost: () => (dispatch) :void => {\n\n  // }\n\n  fetchPosts: () => (dispatch): Promise<void> => {\n    return postApi\n      .getListAllPost()\n      .then(({ data }) => {\n        dispatch(Actions.setPosts(<IPosts>data));\n        return Promise.resolve();\n      })\n      .catch((err) => console.log(err));\n  },\n  fetchDeletePost: (postId) => (dispatch): Promise<void> => {\n    return postApi.deletePost(postId).then((data) => {\n      console.log(\"data\", data);\n      dispatch(Actions.deletePost(postId));\n      return Promise.resolve();\n    });\n  },\n  fetchUpdatePost: (postId, title, body) => (dispatch): void => {\n    postApi.updatePost(postId, title, body).then(({ data }) => {\n      console.log(\"data\", data);\n      dispatch(Actions.updatePost(data.id, data.title, data.body));\n    });\n  },\n};\n\nexport default Actions;\n"]},"metadata":{},"sourceType":"module"}