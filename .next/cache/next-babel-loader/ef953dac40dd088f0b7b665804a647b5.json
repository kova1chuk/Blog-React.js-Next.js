{"ast":null,"code":"import { postApi } from \"utils/api\";\nimport { CREATE_POST, UPDATE_POST, DELETE_POST, SET_POSTS } from \"./types\";\nvar Actions = {\n  createPost: function createPost(newPost) {\n    return {\n      type: CREATE_POST,\n      payload: newPost\n    };\n  },\n  updatePost: function updatePost(newPost) {\n    return {\n      type: UPDATE_POST,\n      payload: newPost\n    };\n  },\n  deletePost: function deletePost(postId) {\n    return {\n      type: DELETE_POST,\n      payload: {\n        id: postId\n      }\n    };\n  },\n  setPosts: function setPosts(posts) {\n    return {\n      type: SET_POSTS,\n      payload: posts\n    };\n  },\n  // fetchCreatePost: () => (dispatch) :void => {\n  // }\n  fetchPosts: function fetchPosts() {\n    return function (dispatch) {\n      return postApi.getListAllPost().then(function (_ref) {\n        var data = _ref.data;\n        dispatch(Actions.setPosts(data));\n        return Promise.resolve();\n      })[\"catch\"](function (err) {\n        return console.log(err);\n      });\n    };\n  },\n  fetchDeletePost: function fetchDeletePost(postId) {\n    return function (dispatch) {\n      return postApi.deletePost(postId).then(function (data) {\n        console.log(\"data\", data);\n        dispatch(Actions.deletePost(postId));\n        return Promise.resolve();\n      });\n    };\n  },\n  fetchUpdatePost: function fetchUpdatePost(postId, title, body) {\n    return function (dispatch) {\n      return postApi.updatePost(postId, title, body).then(function (_ref2) {\n        var data = _ref2.data;\n        console.log(\"data\", data);\n        dispatch(Actions.updatePost({\n          id: data.id,\n          title: data.title,\n          body: data.body\n        }));\n        return Promise.resolve();\n      });\n    };\n  }\n};\nexport default Actions;","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/DevelopsTodayTestTask/store/posts/actions.ts"],"names":["postApi","CREATE_POST","UPDATE_POST","DELETE_POST","SET_POSTS","Actions","createPost","newPost","type","payload","updatePost","deletePost","postId","id","setPosts","posts","fetchPosts","dispatch","getListAllPost","then","data","Promise","resolve","err","console","log","fetchDeletePost","fetchUpdatePost","title","body"],"mappings":"AAAA,SAASA,OAAT,QAAwB,WAAxB;AAGA,SACEC,WADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,SAJF,QAMO,SANP;AAQA,IAAMC,OAAO,GAAG;AACdC,EAAAA,UAAU,EAAE,oBAACC,OAAD,EAAsC;AAChD,WAAO;AACLC,MAAAA,IAAI,EAAEP,WADD;AAELQ,MAAAA,OAAO,EAAEF;AAFJ,KAAP;AAID,GANa;AAQdG,EAAAA,UAAU,EAAE,oBAACH,OAAD,EAAsC;AAChD,WAAO;AACLC,MAAAA,IAAI,EAAEN,WADD;AAELO,MAAAA,OAAO,EAAEF;AAFJ,KAAP;AAID,GAba;AAedI,EAAAA,UAAU,EAAE,oBAACC,MAAD,EAAsC;AAChD,WAAO;AACLJ,MAAAA,IAAI,EAAEL,WADD;AAELM,MAAAA,OAAO,EAAE;AAAEI,QAAAA,EAAE,EAAED;AAAN;AAFJ,KAAP;AAID,GApBa;AAsBdE,EAAAA,QAAQ,EAAE,kBAACC,KAAD,EAAqC;AAC7C,WAAO;AACLP,MAAAA,IAAI,EAAEJ,SADD;AAELK,MAAAA,OAAO,EAAEM;AAFJ,KAAP;AAID,GA3Ba;AA6Bd;AAEA;AAEAC,EAAAA,UAAU,EAAE;AAAA,WAAM,UAACC,QAAD,EAA6B;AAC7C,aAAOjB,OAAO,CACXkB,cADI,GAEJC,IAFI,CAEC,gBAAc;AAAA,YAAXC,IAAW,QAAXA,IAAW;AAClBH,QAAAA,QAAQ,CAACZ,OAAO,CAACS,QAAR,CAAyBM,IAAzB,CAAD,CAAR;AACA,eAAOC,OAAO,CAACC,OAAR,EAAP;AACD,OALI,WAME,UAACC,GAAD;AAAA,eAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAT;AAAA,OANF,CAAP;AAOD,KARW;AAAA,GAjCE;AA0CdG,EAAAA,eAAe,EAAE,yBAACd,MAAD;AAAA,WAAY,UAACK,QAAD,EAA6B;AACxD,aAAOjB,OAAO,CAACW,UAAR,CAAmBC,MAAnB,EAA2BO,IAA3B,CAAgC,UAACC,IAAD,EAAU;AAC/CI,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBL,IAApB;AACAH,QAAAA,QAAQ,CAACZ,OAAO,CAACM,UAAR,CAAmBC,MAAnB,CAAD,CAAR;AACA,eAAOS,OAAO,CAACC,OAAR,EAAP;AACD,OAJM,CAAP;AAKD,KANgB;AAAA,GA1CH;AAiDdK,EAAAA,eAAe,EAAE,yBAACf,MAAD,EAASgB,KAAT,EAAgBC,IAAhB;AAAA,WAAyB,UAACZ,QAAD,EAA6B;AACrE,aAAOjB,OAAO,CAACU,UAAR,CAAmBE,MAAnB,EAA2BgB,KAA3B,EAAkCC,IAAlC,EAAwCV,IAAxC,CAA6C,iBAAc;AAAA,YAAXC,IAAW,SAAXA,IAAW;AAChEI,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBL,IAApB;AACAH,QAAAA,QAAQ,CACNZ,OAAO,CAACK,UAAR,CAAmB;AACjBG,UAAAA,EAAE,EAAEO,IAAI,CAACP,EADQ;AAEjBe,UAAAA,KAAK,EAAER,IAAI,CAACQ,KAFK;AAGjBC,UAAAA,IAAI,EAAET,IAAI,CAACS;AAHM,SAAnB,CADM,CAAR;AAOA,eAAOR,OAAO,CAACC,OAAR,EAAP;AACD,OAVM,CAAP;AAWD,KAZgB;AAAA;AAjDH,CAAhB;AAgEA,eAAejB,OAAf","sourcesContent":["import { postApi } from \"utils/api\";\n\nimport { IPosts, IPost } from \"interfaces\";\nimport {\n  CREATE_POST,\n  UPDATE_POST,\n  DELETE_POST,\n  SET_POSTS,\n  IPostActionTypes,\n} from \"./types\";\n\nconst Actions = {\n  createPost: (newPost: IPost): IPostActionTypes => {\n    return {\n      type: CREATE_POST,\n      payload: newPost,\n    };\n  },\n\n  updatePost: (newPost: IPost): IPostActionTypes => {\n    return {\n      type: UPDATE_POST,\n      payload: newPost,\n    };\n  },\n\n  deletePost: (postId: number): IPostActionTypes => {\n    return {\n      type: DELETE_POST,\n      payload: { id: postId },\n    };\n  },\n\n  setPosts: (posts: IPosts): IPostActionTypes => {\n    return {\n      type: SET_POSTS,\n      payload: posts,\n    };\n  },\n\n  // fetchCreatePost: () => (dispatch) :void => {\n\n  // }\n\n  fetchPosts: () => (dispatch): Promise<void> => {\n    return postApi\n      .getListAllPost()\n      .then(({ data }) => {\n        dispatch(Actions.setPosts(<IPosts>data));\n        return Promise.resolve();\n      })\n      .catch((err) => console.log(err));\n  },\n  fetchDeletePost: (postId) => (dispatch): Promise<void> => {\n    return postApi.deletePost(postId).then((data) => {\n      console.log(\"data\", data);\n      dispatch(Actions.deletePost(postId));\n      return Promise.resolve();\n    });\n  },\n  fetchUpdatePost: (postId, title, body) => (dispatch): Promise<void> => {\n    return postApi.updatePost(postId, title, body).then(({ data }) => {\n      console.log(\"data\", data);\n      dispatch(\n        Actions.updatePost({\n          id: data.id,\n          title: data.title,\n          body: data.body,\n        })\n      );\n      return Promise.resolve();\n    });\n  },\n};\n\nexport default Actions;\n"]},"metadata":{},"sourceType":"module"}