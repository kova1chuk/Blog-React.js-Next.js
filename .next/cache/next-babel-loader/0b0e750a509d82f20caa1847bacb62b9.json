{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/oleksii/Documents/Programming/DevelopsTodayTestTask/pages/posts/[postId].tsx\";\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { connect } from \"react-redux\";\nimport values from \"lodash/values\";\nimport retrievePostActions from \"store/retrievePost/actions\";\nimport postActions from \"store/posts/actions\";\nimport UpdatePost from \"components/UpdatePost\";\n\nvar Posts = function Posts(_ref) {\n  var post = _ref.post,\n      fetchRetrievePosts = _ref.fetchRetrievePosts,\n      fetchUpdatePost = _ref.fetchUpdatePost,\n      fetchDeletePost = _ref.fetchDeletePost;\n  var router = useRouter();\n\n  var _useState = useState(\"\"),\n      newComment = _useState[0],\n      setNewComment = _useState[1];\n\n  var postId = router.query.postId;\n\n  if (!post || post.id !== Number(postId)) {\n    fetchRetrievePosts(router.query.postId).then(function () {});\n  } // const { postId } = router.query;\n\n\n  var updatePost = function updatePost(postId, updateTitle, updateBody) {\n    fetchUpdatePost(postId, updateTitle, updateBody).then(function () {\n      fetchRetrievePosts(router.query.postId);\n    });\n  };\n\n  var deletePost = function deletePost() {\n    fetchDeletePost(postId).then(function () {\n      alert(\"Post deleted!\");\n      router.push(\"/\");\n    });\n  };\n\n  var changeComment = function changeComment(event) {\n    setNewComment(event.target.value);\n  };\n\n  return post && __jsx(\"div\", {\n    className: \"post\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"post__title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, post.title), __jsx(\"div\", {\n    className: \"post__body\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, post.body), __jsx(UpdatePost, {\n    post: post,\n    sendUpdate: updatePost,\n    sendDelete: deletePost,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: \"post__add-comment\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    value: newComment,\n    onChange: changeComment,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }), __jsx(\"button\", {\n    onClick: function onClick() {\n      return sendUpdate(post.id, updateTitle, updateBody);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, \"Add comment\")), __jsx(\"div\", {\n    className: \"post__comments\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, values(post.comments).map(function (comment) {\n    return __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, comment.body);\n  })));\n};\n\nvar mapStateToProps = function mapStateToProps(_ref2) {\n  var retrievePostReducer = _ref2.retrievePostReducer;\n  return {\n    post: retrievePostReducer.post\n  };\n};\n\nvar mapDispatchToProps = {\n  fetchRetrievePosts: retrievePostActions.fetchRetrievePosts,\n  fetchUpdatePost: postActions.fetchUpdatePost,\n  fetchDeletePost: postActions.fetchDeletePost\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/DevelopsTodayTestTask/pages/posts/[postId].tsx"],"names":["Posts","post","fetchRetrievePosts","fetchUpdatePost","fetchDeletePost","router","useRouter","newComment","setNewComment","useState","postId","Number","updatePost","deletePost","alert","changeComment","event","sendUpdate","comment","mapStateToProps","retrievePostReducer","mapDispatchToProps","retrievePostActions","postActions","connect"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport { useRouter } from \"next/router\";\nimport { connect } from \"react-redux\";\nimport values from \"lodash/values\";\n\nimport retrievePostActions from \"store/retrievePost/actions\";\nimport postActions from \"store/posts/actions\";\nimport { IRetrievePost } from \"interfaces\";\nimport UpdatePost from \"components/UpdatePost\";\n\nconst Posts: React.FC<{\n  post: IRetrievePost;\n  fetchRetrievePosts: any;\n  fetchUpdatePost: any;\n  fetchDeletePost: any;\n}> = ({ post, fetchRetrievePosts, fetchUpdatePost, fetchDeletePost }) => {\n  const router = useRouter();\n\n  const [newComment, setNewComment] = useState(\"\");\n\n  const postId: string | string[] = router.query.postId;\n\n  if (!post || post.id !== Number(postId)) {\n    fetchRetrievePosts(router.query.postId).then(() => {});\n  }\n  // const { postId } = router.query;\n\n  const updatePost = (postId, updateTitle, updateBody) => {\n    fetchUpdatePost(postId, updateTitle, updateBody).then(() => {\n      fetchRetrievePosts(router.query.postId);\n    });\n  };\n\n  const deletePost = () => {\n    fetchDeletePost(postId).then(() => {\n      alert(\"Post deleted!\");\n      router.push(\"/\");\n    });\n  };\n\n  const changeComment = (event) => {\n    setNewComment(event.target.value);\n  };\n\n  return (\n    post && (\n      <div className=\"post\">\n        <div className=\"post__title\">{post.title}</div>\n        <div className=\"post__body\">{post.body}</div>\n        <UpdatePost\n          post={post}\n          sendUpdate={updatePost}\n          sendDelete={deletePost}\n        />\n        <div className=\"post__add-comment\">\n          <input type=\"text\" value={newComment} onChange={changeComment} />\n          <button onClick={() => sendUpdate(post.id, updateTitle, updateBody)}>\n            Add comment\n          </button>\n        </div>\n        <div className=\"post__comments\">\n          {values(post.comments).map((comment) => (\n            <p>{comment.body}</p>\n          ))}\n        </div>\n      </div>\n    )\n  );\n};\n\nconst mapStateToProps = ({ retrievePostReducer }) => ({\n  post: retrievePostReducer.post,\n});\nconst mapDispatchToProps = {\n  fetchRetrievePosts: retrievePostActions.fetchRetrievePosts,\n  fetchUpdatePost: postActions.fetchUpdatePost,\n  fetchDeletePost: postActions.fetchDeletePost,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);\n"]},"metadata":{},"sourceType":"module"}