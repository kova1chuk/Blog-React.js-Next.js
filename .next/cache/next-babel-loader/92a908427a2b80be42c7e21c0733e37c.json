{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/oleksii/Documents/Programming/DevelopsTodayTestTask/pages/posts/[postId].tsx\";\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { connect } from \"react-redux\";\nimport values from \"lodash/values\";\nimport retrievePostActions from \"store/retrievePost/actions\";\nimport postActions from \"store/posts/actions\";\nimport UpdatePost from \"components/UpdatePost\";\n\nvar Posts = function Posts(_ref) {\n  var post = _ref.post,\n      fetchRetrievePosts = _ref.fetchRetrievePosts,\n      fetchUpdatePost = _ref.fetchUpdatePost,\n      fetchDeletePost = _ref.fetchDeletePost;\n  var router = useRouter();\n\n  var _useState = useState(\"\"),\n      newComment = _useState[0],\n      setNewComment = _useState[1];\n\n  var postId = router.query.postId;\n\n  if (!post || post.id !== Number(postId)) {\n    fetchRetrievePosts(router.query.postId).then(function () {});\n  } // const { postId } = router.query;\n\n\n  var updatePost = function updatePost(postId, updateTitle, updateBody) {\n    fetchUpdatePost(postId, updateTitle, updateBody).then(function () {\n      fetchRetrievePosts(router.query.postId);\n    });\n  };\n\n  var deletePost = function deletePost() {\n    fetchDeletePost(postId).then(function () {\n      alert(\"Post deleted!\");\n      router.push(\"/\");\n    });\n  };\n\n  var changeComment = function changeComment(event) {\n    setNewComment(event.target.value);\n  };\n\n  return post && __jsx(\"div\", {\n    className: \"post\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"post__title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, post.title), __jsx(\"div\", {\n    className: \"post__body\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, post.body), __jsx(UpdatePost, {\n    post: post,\n    sendUpdate: updatePost,\n    sendDelete: deletePost,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: \"post__add-comment\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    value: newComment,\n    onChange: changeComment,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }), __jsx(\"button\", {\n    onClick: function onClick() {\n      return sendUpdate(post.id, updateTitle, updateBody);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, \"Add comment\")), __jsx(\"div\", {\n    className: \"post__comments\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, values(post.comments).map(function (comment) {\n    return __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, comment.body);\n  })));\n};\n\nvar mapStateToProps = function mapStateToProps(_ref2) {\n  var retrievePostReducer = _ref2.retrievePostReducer;\n  return {\n    post: retrievePostReducer.post\n  };\n};\n\nvar mapDispatchToProps = {\n  fetchRetrievePosts: retrievePostActions.fetchRetrievePosts,\n  fetchUpdatePost: postActions.fetchUpdatePost,\n  fetchDeletePost: postActions.fetchDeletePost\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/DevelopsTodayTestTask/pages/posts/[postId].tsx"],"names":["React","useState","useRouter","connect","values","retrievePostActions","postActions","UpdatePost","Posts","post","fetchRetrievePosts","fetchUpdatePost","fetchDeletePost","router","newComment","setNewComment","postId","query","id","Number","then","updatePost","updateTitle","updateBody","deletePost","alert","push","changeComment","event","target","value","title","body","sendUpdate","comments","map","comment","mapStateToProps","retrievePostReducer","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport { useRouter } from \"next/router\";\nimport { connect } from \"react-redux\";\nimport values from \"lodash/values\";\n\nimport retrievePostActions from \"store/retrievePost/actions\";\nimport postActions from \"store/posts/actions\";\nimport { IRetrievePost } from \"interfaces\";\nimport UpdatePost from \"components/UpdatePost\";\n\nconst Posts: React.FC<{\n  post: IRetrievePost;\n  fetchRetrievePosts: any;\n  fetchUpdatePost: any;\n  fetchDeletePost: any;\n}> = ({ post, fetchRetrievePosts, fetchUpdatePost, fetchDeletePost }) => {\n  const router = useRouter();\n\n  const [newComment, setNewComment] = useState(\"\");\n\n  const postId: string | string[] = router.query.postId;\n\n  if (!post || post.id !== Number(postId)) {\n    fetchRetrievePosts(router.query.postId).then(() => {});\n  }\n  // const { postId } = router.query;\n\n  const updatePost = (postId, updateTitle, updateBody) => {\n    fetchUpdatePost(postId, updateTitle, updateBody).then(() => {\n      fetchRetrievePosts(router.query.postId);\n    });\n  };\n\n  const deletePost = () => {\n    fetchDeletePost(postId).then(() => {\n      alert(\"Post deleted!\");\n      router.push(\"/\");\n    });\n  };\n\n  const changeComment = (event) => {\n    setNewComment(event.target.value);\n  };\n\n  return (\n    post && (\n      <div className=\"post\">\n        <div className=\"post__title\">{post.title}</div>\n        <div className=\"post__body\">{post.body}</div>\n        <UpdatePost\n          post={post}\n          sendUpdate={updatePost}\n          sendDelete={deletePost}\n        />\n        <div className=\"post__add-comment\">\n          <input type=\"text\" value={newComment} onChange={changeComment} />\n          <button onClick={() => sendUpdate(post.id, updateTitle, updateBody)}>\n            Add comment\n          </button>\n        </div>\n        <div className=\"post__comments\">\n          {values(post.comments).map((comment) => (\n            <p>{comment.body}</p>\n          ))}\n        </div>\n      </div>\n    )\n  );\n};\n\nconst mapStateToProps = ({ retrievePostReducer }) => ({\n  post: retrievePostReducer.post,\n});\nconst mapDispatchToProps = {\n  fetchRetrievePosts: retrievePostActions.fetchRetrievePosts,\n  fetchUpdatePost: postActions.fetchUpdatePost,\n  fetchDeletePost: postActions.fetchDeletePost,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);\n"]},"metadata":{},"sourceType":"module"}