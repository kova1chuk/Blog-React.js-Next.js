{"ast":null,"code":"var _jsxFileName = \"/home/oleksii/Documents/Programming/develops-today-test-task1/pages/posts/[postId].tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { connect } from \"react-redux\";\nimport values from \"lodash/values\";\nimport retrievePostActions from \"store/retrievePost/actions\";\nimport postActions from \"store/posts/actions\";\nimport UpdatePost from \"components/UpdatePost\";\n\nconst Posts = ({\n  post,\n  fetchRetrievePosts,\n  fetchUpdatePost,\n  fetchDeletePost,\n  fetchCreateComment\n}) => {\n  const router = useRouter();\n  const {\n    0: newComment,\n    1: setNewComment\n  } = useState(\"\");\n  const postId = router.query.postId;\n\n  if (!post || post.id !== Number(postId)) {\n    fetchRetrievePosts(router.query.postId).then(() => {});\n  }\n\n  const updatePost = (postId, updateTitle, updateBody) => {\n    fetchUpdatePost(postId, updateTitle, updateBody).then(() => {\n      fetchRetrievePosts(router.query.postId);\n    });\n  };\n\n  const deletePost = () => {\n    fetchDeletePost(postId).then(() => {\n      alert(\"Post deleted!\");\n      router.push(\"/\");\n    });\n  };\n\n  const changeComment = event => {\n    setNewComment(event.target.value);\n  };\n\n  const addComment = () => {\n    fetchCreateComment(postId, newComment);\n  };\n\n  return post && __jsx(\"div\", {\n    className: \"post\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"post__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, post.title), __jsx(\"div\", {\n    className: \"post__body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, post.body), __jsx(UpdatePost, {\n    post: post,\n    sendUpdate: updatePost,\n    sendDelete: deletePost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: \"post__add-comment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    value: newComment,\n    onChange: changeComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }), __jsx(\"button\", {\n    onClick: addComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, \"Add comment\")), __jsx(\"div\", {\n    className: \"post__comments\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, values(post.comments).map(comment => __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, comment.body))));\n};\n\nconst mapStateToProps = ({\n  retrievePostReducer\n}) => ({\n  post: retrievePostReducer.post\n});\n\nconst mapDispatchToProps = {\n  fetchRetrievePosts: retrievePostActions.fetchRetrievePosts,\n  fetchUpdatePost: postActions.fetchUpdatePost,\n  fetchDeletePost: postActions.fetchDeletePost,\n  fetchCreateComment: retrievePostActions.fetchCreateComment\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/develops-today-test-task1/pages/posts/[postId].tsx"],"names":["React","useState","useRouter","connect","values","retrievePostActions","postActions","UpdatePost","Posts","post","fetchRetrievePosts","fetchUpdatePost","fetchDeletePost","fetchCreateComment","router","newComment","setNewComment","postId","query","id","Number","then","updatePost","updateTitle","updateBody","deletePost","alert","push","changeComment","event","target","value","addComment","title","body","comments","map","comment","mapStateToProps","retrievePostReducer","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport { useRouter } from \"next/router\";\nimport { connect } from \"react-redux\";\nimport values from \"lodash/values\";\n\nimport retrievePostActions from \"store/retrievePost/actions\";\nimport postActions from \"store/posts/actions\";\nimport { IRetrievePost } from \"interfaces\";\nimport UpdatePost from \"components/UpdatePost\";\n\ninterface IProps {\n  post: IRetrievePost;\n  fetchRetrievePosts: any;\n  fetchUpdatePost: any;\n  fetchDeletePost: any;\n  fetchCreateComment: any;\n}\n\nconst Posts: React.FC<IProps> = ({\n  post,\n  fetchRetrievePosts,\n  fetchUpdatePost,\n  fetchDeletePost,\n  fetchCreateComment,\n}) => {\n  const router = useRouter();\n\n  const [newComment, setNewComment] = useState<string>(\"\");\n\n  const postId: string | string[] = router.query.postId;\n\n  if (!post || post.id !== Number(postId)) {\n    fetchRetrievePosts(router.query.postId).then(() => {});\n  }\n\n  const updatePost = (postId, updateTitle, updateBody) => {\n    fetchUpdatePost(postId, updateTitle, updateBody).then(() => {\n      fetchRetrievePosts(router.query.postId);\n    });\n  };\n\n  const deletePost = () => {\n    fetchDeletePost(postId).then(() => {\n      alert(\"Post deleted!\");\n      router.push(\"/\");\n    });\n  };\n\n  const changeComment = (event) => {\n    setNewComment(event.target.value);\n  };\n\n  const addComment = () => {\n    fetchCreateComment(postId, newComment);\n  };\n\n  return (\n    post && (\n      <div className=\"post\">\n        <div className=\"post__title\">{post.title}</div>\n        <div className=\"post__body\">{post.body}</div>\n        <UpdatePost\n          post={post}\n          sendUpdate={updatePost}\n          sendDelete={deletePost}\n        />\n        <div className=\"post__add-comment\">\n          <input type=\"text\" value={newComment} onChange={changeComment} />\n          <button onClick={addComment}>Add comment</button>\n        </div>\n        <div className=\"post__comments\">\n          {values(post.comments).map((comment) => (\n            <p>{comment.body}</p>\n          ))}\n        </div>\n      </div>\n    )\n  );\n};\n\nconst mapStateToProps = ({ retrievePostReducer }) => ({\n  post: retrievePostReducer.post,\n});\nconst mapDispatchToProps = {\n  fetchRetrievePosts: retrievePostActions.fetchRetrievePosts,\n  fetchUpdatePost: postActions.fetchUpdatePost,\n  fetchDeletePost: postActions.fetchDeletePost,\n  fetchCreateComment: retrievePostActions.fetchCreateComment,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);\n"]},"metadata":{},"sourceType":"module"}