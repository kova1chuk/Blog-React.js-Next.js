{"ast":null,"code":"import values from \"lodash/values\";\nimport { UPDATE_POST, DELETE_POST, SET_POSTS } from \"./types\";\nconst initialState = {\n  posts: null\n};\nexport const postReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_POST:\n      return {\n        posts: values(state.posts).map(post => {\n          if (post.id !== Number(action.payload.id)) {\n            return action.payload;\n          }\n\n          return post;\n        })\n      };\n\n    case DELETE_POST:\n      return {\n        posts: values(state.posts).filter(post => post.id !== Number(action.payload))\n      };\n\n    case SET_POSTS:\n      return {\n        posts: action.payload\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/develops-today-test-task1/store/posts/reducer.ts"],"names":["values","UPDATE_POST","DELETE_POST","SET_POSTS","initialState","posts","postReducer","state","action","type","map","post","id","Number","payload","filter"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,eAAnB;AACA,SAGEC,WAHF,EAIEC,WAJF,EAKEC,SALF,QAOO,SAPP;AASA,MAAMC,YAAyB,GAAG;AAChCC,EAAAA,KAAK,EAAE;AADyB,CAAlC;AAIA,OAAO,MAAMC,WAAW,GAAG,CACzBC,KAAK,GAAGH,YADiB,EAEzBI,MAFyB,KAGT;AAChB,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,WAAL;AACE,aAAO;AACLI,QAAAA,KAAK,EAAEL,MAAM,CAACO,KAAK,CAACF,KAAP,CAAN,CAAoBK,GAApB,CAAyBC,IAAD,IAAU;AACvC,cAAIA,IAAI,CAACC,EAAL,KAAYC,MAAM,CAACL,MAAM,CAACM,OAAP,CAAeF,EAAhB,CAAtB,EAA2C;AACzC,mBAAOJ,MAAM,CAACM,OAAd;AACD;;AACD,iBAAOH,IAAP;AACD,SALM;AADF,OAAP;;AAQF,SAAKT,WAAL;AACE,aAAO;AACLG,QAAAA,KAAK,EAAEL,MAAM,CAACO,KAAK,CAACF,KAAP,CAAN,CAAoBU,MAApB,CACJJ,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYC,MAAM,CAACL,MAAM,CAACM,OAAR,CADvB;AADF,OAAP;;AAKF,SAAKX,SAAL;AACE,aAAO;AACLE,QAAAA,KAAK,EAAEG,MAAM,CAACM;AADT,OAAP;;AAGF;AACE,aAAOP,KAAP;AArBJ;AAuBD,CA3BM","sourcesContent":["import values from \"lodash/values\";\nimport {\n  IPostsState,\n  // CREATE_POST,\n  UPDATE_POST,\n  DELETE_POST,\n  SET_POSTS,\n  IPostActionTypes,\n} from \"./types\";\n\nconst initialState: IPostsState = {\n  posts: null,\n};\n\nexport const postReducer = (\n  state = initialState,\n  action: IPostActionTypes\n): IPostsState => {\n  switch (action.type) {\n    case UPDATE_POST:\n      return {\n        posts: values(state.posts).map((post) => {\n          if (post.id !== Number(action.payload.id)) {\n            return action.payload;\n          }\n          return post;\n        }),\n      };\n    case DELETE_POST:\n      return {\n        posts: values(state.posts).filter(\n          (post) => post.id !== Number(action.payload)\n        ),\n      };\n    case SET_POSTS:\n      return {\n        posts: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}