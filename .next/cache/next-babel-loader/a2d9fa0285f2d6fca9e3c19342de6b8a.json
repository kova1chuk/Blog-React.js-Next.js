{"ast":null,"code":"import { postApi } from \"utils/api\";\nimport { CREATE_POST, UPDATE_POST, DELETE_POST, SET_POSTS } from \"./types\";\nconst Actions = {\n  createPost: newPost => {\n    return {\n      type: CREATE_POST,\n      payload: newPost\n    };\n  },\n  updatePost: newPost => {\n    return {\n      type: UPDATE_POST,\n      payload: newPost\n    };\n  },\n  deletePost: postId => {\n    return {\n      type: DELETE_POST,\n      payload: {\n        id: postId\n      }\n    };\n  },\n  setPosts: posts => {\n    return {\n      type: SET_POSTS,\n      payload: posts\n    };\n  },\n  // fetchCreatePost: () => (dispatch) :void => {\n  // }\n  fetchPosts: () => dispatch => {\n    return postApi.getListAllPost().then(({\n      data\n    }) => {\n      dispatch(Actions.setPosts(data));\n      return Promise.resolve();\n    }).catch(err => console.log(err));\n  },\n  fetchDeletePost: postId => dispatch => {\n    return postApi.deletePost(postId).then(data => {\n      console.log(\"data\", data);\n      dispatch(Actions.deletePost(postId));\n      return Promise.resolve();\n    });\n  },\n  fetchUpdatePost: (postId, title, body) => dispatch => {\n    return postApi.updatePost(postId, title, body).then(({\n      data\n    }) => {\n      console.log(\"data\", data);\n      dispatch(Actions.updatePost({\n        id: data.id,\n        title: data.title,\n        body: data.body\n      }));\n    });\n  }\n};\nexport default Actions;","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/DevelopsTodayTestTask/store/posts/actions.ts"],"names":["postApi","CREATE_POST","UPDATE_POST","DELETE_POST","SET_POSTS","Actions","createPost","newPost","type","payload","updatePost","deletePost","postId","id","setPosts","posts","fetchPosts","dispatch","getListAllPost","then","data","Promise","resolve","catch","err","console","log","fetchDeletePost","fetchUpdatePost","title","body"],"mappings":"AAAA,SAASA,OAAT,QAAwB,WAAxB;AAGA,SACEC,WADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,SAJF,QAMO,SANP;AAQA,MAAMC,OAAO,GAAG;AACdC,EAAAA,UAAU,EAAGC,OAAD,IAAsC;AAChD,WAAO;AACLC,MAAAA,IAAI,EAAEP,WADD;AAELQ,MAAAA,OAAO,EAAEF;AAFJ,KAAP;AAID,GANa;AAQdG,EAAAA,UAAU,EAAGH,OAAD,IAAsC;AAChD,WAAO;AACLC,MAAAA,IAAI,EAAEN,WADD;AAELO,MAAAA,OAAO,EAAEF;AAFJ,KAAP;AAID,GAba;AAedI,EAAAA,UAAU,EAAGC,MAAD,IAAsC;AAChD,WAAO;AACLJ,MAAAA,IAAI,EAAEL,WADD;AAELM,MAAAA,OAAO,EAAE;AAAEI,QAAAA,EAAE,EAAED;AAAN;AAFJ,KAAP;AAID,GApBa;AAsBdE,EAAAA,QAAQ,EAAGC,KAAD,IAAqC;AAC7C,WAAO;AACLP,MAAAA,IAAI,EAAEJ,SADD;AAELK,MAAAA,OAAO,EAAEM;AAFJ,KAAP;AAID,GA3Ba;AA6Bd;AAEA;AAEAC,EAAAA,UAAU,EAAE,MAAOC,QAAD,IAA6B;AAC7C,WAAOjB,OAAO,CACXkB,cADI,GAEJC,IAFI,CAEC,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAClBH,MAAAA,QAAQ,CAACZ,OAAO,CAACS,QAAR,CAAyBM,IAAzB,CAAD,CAAR;AACA,aAAOC,OAAO,CAACC,OAAR,EAAP;AACD,KALI,EAMJC,KANI,CAMGC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CANX,CAAP;AAOD,GAzCa;AA0CdG,EAAAA,eAAe,EAAGf,MAAD,IAAaK,QAAD,IAA6B;AACxD,WAAOjB,OAAO,CAACW,UAAR,CAAmBC,MAAnB,EAA2BO,IAA3B,CAAiCC,IAAD,IAAU;AAC/CK,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBN,IAApB;AACAH,MAAAA,QAAQ,CAACZ,OAAO,CAACM,UAAR,CAAmBC,MAAnB,CAAD,CAAR;AACA,aAAOS,OAAO,CAACC,OAAR,EAAP;AACD,KAJM,CAAP;AAKD,GAhDa;AAiDdM,EAAAA,eAAe,EAAE,CAAChB,MAAD,EAASiB,KAAT,EAAgBC,IAAhB,KAA0Bb,QAAD,IAA6B;AACrE,WAAOjB,OAAO,CAACU,UAAR,CAAmBE,MAAnB,EAA2BiB,KAA3B,EAAkCC,IAAlC,EAAwCX,IAAxC,CAA6C,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAChEK,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBN,IAApB;AACAH,MAAAA,QAAQ,CACNZ,OAAO,CAACK,UAAR,CAAmB;AACjBG,QAAAA,EAAE,EAAEO,IAAI,CAACP,EADQ;AAEjBgB,QAAAA,KAAK,EAAET,IAAI,CAACS,KAFK;AAGjBC,QAAAA,IAAI,EAAEV,IAAI,CAACU;AAHM,OAAnB,CADM,CAAR;AAOD,KATM,CAAP;AAUD;AA5Da,CAAhB;AA+DA,eAAezB,OAAf","sourcesContent":["import { postApi } from \"utils/api\";\n\nimport { IPosts, IPost } from \"interfaces\";\nimport {\n  CREATE_POST,\n  UPDATE_POST,\n  DELETE_POST,\n  SET_POSTS,\n  IPostActionTypes,\n} from \"./types\";\n\nconst Actions = {\n  createPost: (newPost: IPost): IPostActionTypes => {\n    return {\n      type: CREATE_POST,\n      payload: newPost,\n    };\n  },\n\n  updatePost: (newPost: IPost): IPostActionTypes => {\n    return {\n      type: UPDATE_POST,\n      payload: newPost,\n    };\n  },\n\n  deletePost: (postId: number): IPostActionTypes => {\n    return {\n      type: DELETE_POST,\n      payload: { id: postId },\n    };\n  },\n\n  setPosts: (posts: IPosts): IPostActionTypes => {\n    return {\n      type: SET_POSTS,\n      payload: posts,\n    };\n  },\n\n  // fetchCreatePost: () => (dispatch) :void => {\n\n  // }\n\n  fetchPosts: () => (dispatch): Promise<void> => {\n    return postApi\n      .getListAllPost()\n      .then(({ data }) => {\n        dispatch(Actions.setPosts(<IPosts>data));\n        return Promise.resolve();\n      })\n      .catch((err) => console.log(err));\n  },\n  fetchDeletePost: (postId) => (dispatch): Promise<void> => {\n    return postApi.deletePost(postId).then((data) => {\n      console.log(\"data\", data);\n      dispatch(Actions.deletePost(postId));\n      return Promise.resolve();\n    });\n  },\n  fetchUpdatePost: (postId, title, body) => (dispatch): Promise<void> => {\n    return postApi.updatePost(postId, title, body).then(({ data }) => {\n      console.log(\"data\", data);\n      dispatch(\n        Actions.updatePost({\n          id: data.id,\n          title: data.title,\n          body: data.body,\n        })\n      );\n    });\n  },\n};\n\nexport default Actions;\n"]},"metadata":{},"sourceType":"module"}