{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport values from \"lodash/values\";\nimport { SET_RETRIEVE_POST, ADD_COMMENT } from \"./types\";\nvar initialState = {\n  post: null\n};\nexport var retrievePostReducer = function retrievePostReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_RETRIEVE_POST:\n      return {\n        post: action.payload\n      };\n\n    case ADD_COMMENT:\n      var comments;\n      var type = [].concat(_toConsumableArray(values(state.post.comments)), [action.payload]);\n      console.log(type);\n      return {\n        post: _objectSpread({}, state.post, {\n          comments: comments\n        })\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/DevelopsTodayTestTask/store/retrievePost/reducer.ts"],"names":["values","SET_RETRIEVE_POST","ADD_COMMENT","initialState","post","retrievePostReducer","state","action","type","payload","comments","console","log"],"mappings":";;;;;;;AAAA,OAAOA,MAAP,MAAmB,eAAnB;AACA,SAEEC,iBAFF,EAGEC,WAHF,QAKO,SALP;AASA,IAAMC,YAAgC,GAAG;AACvCC,EAAAA,IAAI,EAAE;AADiC,CAAzC;AAIA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAGV;AAAA,MAFvBC,KAEuB,uEAFfH,YAEe;AAAA,MADvBI,MACuB;;AACvB,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,iBAAL;AACE,aAAO;AACLG,QAAAA,IAAI,EAAEG,MAAM,CAACE;AADR,OAAP;;AAGF,SAAKP,WAAL;AACE,UAAIQ,QAAJ;AACA,UAAMF,IAAI,gCAAOR,MAAM,CAACM,KAAK,CAACF,IAAN,CAAWM,QAAZ,CAAb,IAAoCH,MAAM,CAACE,OAA3C,EAAV;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,aAAO;AACLJ,QAAAA,IAAI,oBACCE,KAAK,CAACF,IADP;AAEFM,UAAAA,QAAQ,EAAEA;AAFR;AADC,OAAP;;AAMF;AACE,aAAOJ,KAAP;AAhBJ;AAkBD,CAtBM","sourcesContent":["import values from \"lodash/values\";\nimport {\n  IRetrievePostState,\n  SET_RETRIEVE_POST,\n  ADD_COMMENT,\n  IRetrievePostActionTypes,\n} from \"./types\";\nimport { IComment } from \"interfaces\";\nimport Actions from \"store/posts/actions\";\n\nconst initialState: IRetrievePostState = {\n  post: null,\n};\n\nexport const retrievePostReducer = (\n  state = initialState,\n  action: IRetrievePostActionTypes\n): IRetrievePostState => {\n  switch (action.type) {\n    case SET_RETRIEVE_POST:\n      return {\n        post: action.payload,\n      };\n    case ADD_COMMENT:\n      let comments: [IComment];\n      const type = [...values(state.post.comments), action.payload];\n      console.log(type);\n      return {\n        post: {\n          ...state.post,\n          comments: comments,\n        },\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}